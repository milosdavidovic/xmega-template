
xmega-template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c74  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001de  00802000  00802000  00000ce8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000253f  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000059a  00000000  00000000  0000356f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af1  00000000  00000000  00003b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009cc  00000000  00000000  000045fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001276  00000000  00000000  00004fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018dc  00000000  00000000  0000623e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00007b1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_10>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_14>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_20>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__vector_25>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_27>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_47>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_53>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__vector_58>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__vector_60>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_77>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_83>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__vector_88>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__vector_90>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_108>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_114>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__vector_119>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_121>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e4 e7       	ldi	r30, 0x74	; 116
 21c:	fc e0       	ldi	r31, 0x0C	; 12
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	21 e2       	ldi	r18, 0x21	; 33
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	ae 3d       	cpi	r26, 0xDE	; 222
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 26 01 	call	0x24c	; 0x24c <main>
 244:	0c 94 38 06 	jmp	0xc70	; 0xc70 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
    }
 24c:	ff cf       	rjmp	.-2      	; 0x24c <main>

0000024e <__vector_10>:
	RTC_CNT = 0; //set compare counter to 0
}

//Overflow Interrupt (on set period)
ISR(RTC_OVF_vect)
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	08 b6       	in	r0, 0x38	; 56
 25a:	0f 92       	push	r0
 25c:	18 be       	out	0x38, r1	; 56
 25e:	09 b6       	in	r0, 0x39	; 57
 260:	0f 92       	push	r0
 262:	19 be       	out	0x39, r1	; 57
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
	timestamp += period; 
 270:	20 91 00 20 	lds	r18, 0x2000
 274:	30 91 01 20 	lds	r19, 0x2001
 278:	80 91 02 20 	lds	r24, 0x2002
 27c:	90 91 03 20 	lds	r25, 0x2003
 280:	a0 91 04 20 	lds	r26, 0x2004
 284:	b0 91 05 20 	lds	r27, 0x2005
 288:	82 0f       	add	r24, r18
 28a:	93 1f       	adc	r25, r19
 28c:	a1 1d       	adc	r26, r1
 28e:	b1 1d       	adc	r27, r1
 290:	80 93 02 20 	sts	0x2002, r24
 294:	90 93 03 20 	sts	0x2003, r25
 298:	a0 93 04 20 	sts	0x2004, r26
 29c:	b0 93 05 20 	sts	0x2005, r27
}
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	09 be       	out	0x39, r0	; 57
 2b0:	0f 90       	pop	r0
 2b2:	08 be       	out	0x38, r0	; 56
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <__vector_14>:
		}break;
	}
}

ISR(TCC0_OVF_vect)
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	08 b6       	in	r0, 0x38	; 56
 2ca:	0f 92       	push	r0
 2cc:	18 be       	out	0x38, r1	; 56
 2ce:	09 b6       	in	r0, 0x39	; 57
 2d0:	0f 92       	push	r0
 2d2:	19 be       	out	0x39, r1	; 57
 2d4:	0b b6       	in	r0, 0x3b	; 59
 2d6:	0f 92       	push	r0
 2d8:	1b be       	out	0x3b, r1	; 59
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
    if(pause) pause--;
 2e6:	80 91 06 20 	lds	r24, 0x2006
 2ea:	90 91 07 20 	lds	r25, 0x2007
 2ee:	a0 91 08 20 	lds	r26, 0x2008
 2f2:	b0 91 09 20 	lds	r27, 0x2009
 2f6:	89 2b       	or	r24, r25
 2f8:	8a 2b       	or	r24, r26
 2fa:	8b 2b       	or	r24, r27
 2fc:	99 f0       	breq	.+38     	; 0x324 <__vector_14+0x66>
 2fe:	80 91 06 20 	lds	r24, 0x2006
 302:	90 91 07 20 	lds	r25, 0x2007
 306:	a0 91 08 20 	lds	r26, 0x2008
 30a:	b0 91 09 20 	lds	r27, 0x2009
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	a1 09       	sbc	r26, r1
 312:	b1 09       	sbc	r27, r1
 314:	80 93 06 20 	sts	0x2006, r24
 318:	90 93 07 20 	sts	0x2007, r25
 31c:	a0 93 08 20 	sts	0x2008, r26
 320:	b0 93 09 20 	sts	0x2009, r27

	/* This is part of TO-NET d.o.o. XMEGA timers library and should not be changed by any user. */
	if(Counters.TimerC0_counter0) {
 324:	80 91 0a 20 	lds	r24, 0x200A
 328:	90 91 0b 20 	lds	r25, 0x200B
 32c:	a0 91 0c 20 	lds	r26, 0x200C
 330:	b0 91 0d 20 	lds	r27, 0x200D
 334:	89 2b       	or	r24, r25
 336:	8a 2b       	or	r24, r26
 338:	8b 2b       	or	r24, r27
 33a:	69 f0       	breq	.+26     	; 0x356 <__vector_14+0x98>
		Counters.TimerC0_counter0--;
 33c:	ea e0       	ldi	r30, 0x0A	; 10
 33e:	f0 e2       	ldi	r31, 0x20	; 32
 340:	80 81       	ld	r24, Z
 342:	91 81       	ldd	r25, Z+1	; 0x01
 344:	a2 81       	ldd	r26, Z+2	; 0x02
 346:	b3 81       	ldd	r27, Z+3	; 0x03
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	a1 09       	sbc	r26, r1
 34c:	b1 09       	sbc	r27, r1
 34e:	80 83       	st	Z, r24
 350:	91 83       	std	Z+1, r25	; 0x01
 352:	a2 83       	std	Z+2, r26	; 0x02
 354:	b3 83       	std	Z+3, r27	; 0x03
	} 
	
	if(Counters.TimerC0_counter1) {
 356:	80 91 0e 20 	lds	r24, 0x200E
 35a:	90 91 0f 20 	lds	r25, 0x200F
 35e:	a0 91 10 20 	lds	r26, 0x2010
 362:	b0 91 11 20 	lds	r27, 0x2011
 366:	89 2b       	or	r24, r25
 368:	8a 2b       	or	r24, r26
 36a:	8b 2b       	or	r24, r27
 36c:	69 f0       	breq	.+26     	; 0x388 <__vector_14+0xca>
		Counters.TimerC0_counter1--;
 36e:	ea e0       	ldi	r30, 0x0A	; 10
 370:	f0 e2       	ldi	r31, 0x20	; 32
 372:	84 81       	ldd	r24, Z+4	; 0x04
 374:	95 81       	ldd	r25, Z+5	; 0x05
 376:	a6 81       	ldd	r26, Z+6	; 0x06
 378:	b7 81       	ldd	r27, Z+7	; 0x07
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	a1 09       	sbc	r26, r1
 37e:	b1 09       	sbc	r27, r1
 380:	84 83       	std	Z+4, r24	; 0x04
 382:	95 83       	std	Z+5, r25	; 0x05
 384:	a6 83       	std	Z+6, r26	; 0x06
 386:	b7 83       	std	Z+7, r27	; 0x07
	}
	
	if(Counters.TimerC0_counter2) {
 388:	80 91 12 20 	lds	r24, 0x2012
 38c:	90 91 13 20 	lds	r25, 0x2013
 390:	a0 91 14 20 	lds	r26, 0x2014
 394:	b0 91 15 20 	lds	r27, 0x2015
 398:	89 2b       	or	r24, r25
 39a:	8a 2b       	or	r24, r26
 39c:	8b 2b       	or	r24, r27
 39e:	69 f0       	breq	.+26     	; 0x3ba <__vector_14+0xfc>
		Counters.TimerC0_counter2--;
 3a0:	ea e0       	ldi	r30, 0x0A	; 10
 3a2:	f0 e2       	ldi	r31, 0x20	; 32
 3a4:	80 85       	ldd	r24, Z+8	; 0x08
 3a6:	91 85       	ldd	r25, Z+9	; 0x09
 3a8:	a2 85       	ldd	r26, Z+10	; 0x0a
 3aa:	b3 85       	ldd	r27, Z+11	; 0x0b
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	a1 09       	sbc	r26, r1
 3b0:	b1 09       	sbc	r27, r1
 3b2:	80 87       	std	Z+8, r24	; 0x08
 3b4:	91 87       	std	Z+9, r25	; 0x09
 3b6:	a2 87       	std	Z+10, r26	; 0x0a
 3b8:	b3 87       	std	Z+11, r27	; 0x0b
	}
	
	if(Counters.TimerC0_counter3) {
 3ba:	80 91 16 20 	lds	r24, 0x2016
 3be:	90 91 17 20 	lds	r25, 0x2017
 3c2:	a0 91 18 20 	lds	r26, 0x2018
 3c6:	b0 91 19 20 	lds	r27, 0x2019
 3ca:	89 2b       	or	r24, r25
 3cc:	8a 2b       	or	r24, r26
 3ce:	8b 2b       	or	r24, r27
 3d0:	69 f0       	breq	.+26     	; 0x3ec <__vector_14+0x12e>
		Counters.TimerC0_counter3--;
 3d2:	ea e0       	ldi	r30, 0x0A	; 10
 3d4:	f0 e2       	ldi	r31, 0x20	; 32
 3d6:	84 85       	ldd	r24, Z+12	; 0x0c
 3d8:	95 85       	ldd	r25, Z+13	; 0x0d
 3da:	a6 85       	ldd	r26, Z+14	; 0x0e
 3dc:	b7 85       	ldd	r27, Z+15	; 0x0f
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	a1 09       	sbc	r26, r1
 3e2:	b1 09       	sbc	r27, r1
 3e4:	84 87       	std	Z+12, r24	; 0x0c
 3e6:	95 87       	std	Z+13, r25	; 0x0d
 3e8:	a6 87       	std	Z+14, r26	; 0x0e
 3ea:	b7 87       	std	Z+15, r27	; 0x0f
	}
}
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	bf 91       	pop	r27
 3f2:	af 91       	pop	r26
 3f4:	9f 91       	pop	r25
 3f6:	8f 91       	pop	r24
 3f8:	0f 90       	pop	r0
 3fa:	0b be       	out	0x3b, r0	; 59
 3fc:	0f 90       	pop	r0
 3fe:	09 be       	out	0x39, r0	; 57
 400:	0f 90       	pop	r0
 402:	08 be       	out	0x38, r0	; 56
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <__vector_20>:

ISR(TCC1_OVF_vect)
{
 40e:	1f 92       	push	r1
 410:	0f 92       	push	r0
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	0f 92       	push	r0
 416:	11 24       	eor	r1, r1
 418:	08 b6       	in	r0, 0x38	; 56
 41a:	0f 92       	push	r0
 41c:	18 be       	out	0x38, r1	; 56
 41e:	09 b6       	in	r0, 0x39	; 57
 420:	0f 92       	push	r0
 422:	19 be       	out	0x39, r1	; 57
 424:	0b b6       	in	r0, 0x3b	; 59
 426:	0f 92       	push	r0
 428:	1b be       	out	0x3b, r1	; 59
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
		if(Counters.TimerC1_counter0) {
 436:	80 91 1a 20 	lds	r24, 0x201A
 43a:	90 91 1b 20 	lds	r25, 0x201B
 43e:	a0 91 1c 20 	lds	r26, 0x201C
 442:	b0 91 1d 20 	lds	r27, 0x201D
 446:	89 2b       	or	r24, r25
 448:	8a 2b       	or	r24, r26
 44a:	8b 2b       	or	r24, r27
 44c:	69 f0       	breq	.+26     	; 0x468 <__vector_20+0x5a>
			Counters.TimerC1_counter0--;
 44e:	ea e0       	ldi	r30, 0x0A	; 10
 450:	f0 e2       	ldi	r31, 0x20	; 32
 452:	80 89       	ldd	r24, Z+16	; 0x10
 454:	91 89       	ldd	r25, Z+17	; 0x11
 456:	a2 89       	ldd	r26, Z+18	; 0x12
 458:	b3 89       	ldd	r27, Z+19	; 0x13
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	a1 09       	sbc	r26, r1
 45e:	b1 09       	sbc	r27, r1
 460:	80 8b       	std	Z+16, r24	; 0x10
 462:	91 8b       	std	Z+17, r25	; 0x11
 464:	a2 8b       	std	Z+18, r26	; 0x12
 466:	b3 8b       	std	Z+19, r27	; 0x13
		}
		
		if(Counters.TimerC1_counter1) {
 468:	80 91 1e 20 	lds	r24, 0x201E
 46c:	90 91 1f 20 	lds	r25, 0x201F
 470:	a0 91 20 20 	lds	r26, 0x2020
 474:	b0 91 21 20 	lds	r27, 0x2021
 478:	89 2b       	or	r24, r25
 47a:	8a 2b       	or	r24, r26
 47c:	8b 2b       	or	r24, r27
 47e:	69 f0       	breq	.+26     	; 0x49a <__vector_20+0x8c>
			Counters.TimerC1_counter1--;
 480:	ea e0       	ldi	r30, 0x0A	; 10
 482:	f0 e2       	ldi	r31, 0x20	; 32
 484:	84 89       	ldd	r24, Z+20	; 0x14
 486:	95 89       	ldd	r25, Z+21	; 0x15
 488:	a6 89       	ldd	r26, Z+22	; 0x16
 48a:	b7 89       	ldd	r27, Z+23	; 0x17
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	a1 09       	sbc	r26, r1
 490:	b1 09       	sbc	r27, r1
 492:	84 8b       	std	Z+20, r24	; 0x14
 494:	95 8b       	std	Z+21, r25	; 0x15
 496:	a6 8b       	std	Z+22, r26	; 0x16
 498:	b7 8b       	std	Z+23, r27	; 0x17
		}
		
		if(Counters.TimerC1_counter2) {
 49a:	80 91 22 20 	lds	r24, 0x2022
 49e:	90 91 23 20 	lds	r25, 0x2023
 4a2:	a0 91 24 20 	lds	r26, 0x2024
 4a6:	b0 91 25 20 	lds	r27, 0x2025
 4aa:	89 2b       	or	r24, r25
 4ac:	8a 2b       	or	r24, r26
 4ae:	8b 2b       	or	r24, r27
 4b0:	69 f0       	breq	.+26     	; 0x4cc <__vector_20+0xbe>
			Counters.TimerC1_counter2--;
 4b2:	ea e0       	ldi	r30, 0x0A	; 10
 4b4:	f0 e2       	ldi	r31, 0x20	; 32
 4b6:	80 8d       	ldd	r24, Z+24	; 0x18
 4b8:	91 8d       	ldd	r25, Z+25	; 0x19
 4ba:	a2 8d       	ldd	r26, Z+26	; 0x1a
 4bc:	b3 8d       	ldd	r27, Z+27	; 0x1b
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	a1 09       	sbc	r26, r1
 4c2:	b1 09       	sbc	r27, r1
 4c4:	80 8f       	std	Z+24, r24	; 0x18
 4c6:	91 8f       	std	Z+25, r25	; 0x19
 4c8:	a2 8f       	std	Z+26, r26	; 0x1a
 4ca:	b3 8f       	std	Z+27, r27	; 0x1b
		}
		
		if(Counters.TimerC1_counter3) {
 4cc:	80 91 26 20 	lds	r24, 0x2026
 4d0:	90 91 27 20 	lds	r25, 0x2027
 4d4:	a0 91 28 20 	lds	r26, 0x2028
 4d8:	b0 91 29 20 	lds	r27, 0x2029
 4dc:	89 2b       	or	r24, r25
 4de:	8a 2b       	or	r24, r26
 4e0:	8b 2b       	or	r24, r27
 4e2:	69 f0       	breq	.+26     	; 0x4fe <__vector_20+0xf0>
			Counters.TimerC1_counter3--;
 4e4:	ea e0       	ldi	r30, 0x0A	; 10
 4e6:	f0 e2       	ldi	r31, 0x20	; 32
 4e8:	84 8d       	ldd	r24, Z+28	; 0x1c
 4ea:	95 8d       	ldd	r25, Z+29	; 0x1d
 4ec:	a6 8d       	ldd	r26, Z+30	; 0x1e
 4ee:	b7 8d       	ldd	r27, Z+31	; 0x1f
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	a1 09       	sbc	r26, r1
 4f4:	b1 09       	sbc	r27, r1
 4f6:	84 8f       	std	Z+28, r24	; 0x1c
 4f8:	95 8f       	std	Z+29, r25	; 0x1d
 4fa:	a6 8f       	std	Z+30, r26	; 0x1e
 4fc:	b7 8f       	std	Z+31, r27	; 0x1f
		}
}
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	0f 90       	pop	r0
 50c:	0b be       	out	0x3b, r0	; 59
 50e:	0f 90       	pop	r0
 510:	09 be       	out	0x39, r0	; 57
 512:	0f 90       	pop	r0
 514:	08 be       	out	0x38, r0	; 56
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <__vector_77>:

ISR(TCD0_OVF_vect)
{
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	08 b6       	in	r0, 0x38	; 56
 52c:	0f 92       	push	r0
 52e:	18 be       	out	0x38, r1	; 56
 530:	09 b6       	in	r0, 0x39	; 57
 532:	0f 92       	push	r0
 534:	19 be       	out	0x39, r1	; 57
 536:	0b b6       	in	r0, 0x3b	; 59
 538:	0f 92       	push	r0
 53a:	1b be       	out	0x3b, r1	; 59
 53c:	2f 93       	push	r18
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31
	if(Counters.TimerD0 < MAX_TIMEOUT) {
 54a:	80 91 2a 20 	lds	r24, 0x202A
 54e:	90 91 2b 20 	lds	r25, 0x202B
 552:	a0 91 2c 20 	lds	r26, 0x202C
 556:	b0 91 2d 20 	lds	r27, 0x202D
 55a:	80 31       	cpi	r24, 0x10	; 16
 55c:	97 42       	sbci	r25, 0x27	; 39
 55e:	a1 05       	cpc	r26, r1
 560:	b1 05       	cpc	r27, r1
 562:	70 f4       	brcc	.+28     	; 0x580 <__vector_77+0x60>
		Counters.TimerD0++;
 564:	ea e0       	ldi	r30, 0x0A	; 10
 566:	f0 e2       	ldi	r31, 0x20	; 32
 568:	80 a1       	ldd	r24, Z+32	; 0x20
 56a:	91 a1       	ldd	r25, Z+33	; 0x21
 56c:	a2 a1       	ldd	r26, Z+34	; 0x22
 56e:	b3 a1       	ldd	r27, Z+35	; 0x23
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	a1 1d       	adc	r26, r1
 574:	b1 1d       	adc	r27, r1
 576:	80 a3       	std	Z+32, r24	; 0x20
 578:	91 a3       	std	Z+33, r25	; 0x21
 57a:	a2 a3       	std	Z+34, r26	; 0x22
 57c:	b3 a3       	std	Z+35, r27	; 0x23
 57e:	08 c0       	rjmp	.+16     	; 0x590 <__vector_77+0x70>
	} else {
		Counters.TimerD0 = 0;
 580:	10 92 2a 20 	sts	0x202A, r1
 584:	10 92 2b 20 	sts	0x202B, r1
 588:	10 92 2c 20 	sts	0x202C, r1
 58c:	10 92 2d 20 	sts	0x202D, r1
	}
}
 590:	ff 91       	pop	r31
 592:	ef 91       	pop	r30
 594:	bf 91       	pop	r27
 596:	af 91       	pop	r26
 598:	9f 91       	pop	r25
 59a:	8f 91       	pop	r24
 59c:	2f 91       	pop	r18
 59e:	0f 90       	pop	r0
 5a0:	0b be       	out	0x3b, r0	; 59
 5a2:	0f 90       	pop	r0
 5a4:	09 be       	out	0x39, r0	; 57
 5a6:	0f 90       	pop	r0
 5a8:	08 be       	out	0x38, r0	; 56
 5aa:	0f 90       	pop	r0
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	0f 90       	pop	r0
 5b0:	1f 90       	pop	r1
 5b2:	18 95       	reti

000005b4 <__vector_83>:

ISR(TCD1_OVF_vect)
{
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	08 b6       	in	r0, 0x38	; 56
 5c0:	0f 92       	push	r0
 5c2:	18 be       	out	0x38, r1	; 56
 5c4:	09 b6       	in	r0, 0x39	; 57
 5c6:	0f 92       	push	r0
 5c8:	19 be       	out	0x39, r1	; 57
 5ca:	0b b6       	in	r0, 0x3b	; 59
 5cc:	0f 92       	push	r0
 5ce:	1b be       	out	0x3b, r1	; 59
 5d0:	2f 93       	push	r18
 5d2:	8f 93       	push	r24
 5d4:	9f 93       	push	r25
 5d6:	af 93       	push	r26
 5d8:	bf 93       	push	r27
 5da:	ef 93       	push	r30
 5dc:	ff 93       	push	r31
	if(Counters.TimerD1 < MAX_TIMEOUT) {
 5de:	80 91 2e 20 	lds	r24, 0x202E
 5e2:	90 91 2f 20 	lds	r25, 0x202F
 5e6:	a0 91 30 20 	lds	r26, 0x2030
 5ea:	b0 91 31 20 	lds	r27, 0x2031
 5ee:	80 31       	cpi	r24, 0x10	; 16
 5f0:	97 42       	sbci	r25, 0x27	; 39
 5f2:	a1 05       	cpc	r26, r1
 5f4:	b1 05       	cpc	r27, r1
 5f6:	70 f4       	brcc	.+28     	; 0x614 <__vector_83+0x60>
		Counters.TimerD1++;
 5f8:	ea e0       	ldi	r30, 0x0A	; 10
 5fa:	f0 e2       	ldi	r31, 0x20	; 32
 5fc:	84 a1       	ldd	r24, Z+36	; 0x24
 5fe:	95 a1       	ldd	r25, Z+37	; 0x25
 600:	a6 a1       	ldd	r26, Z+38	; 0x26
 602:	b7 a1       	ldd	r27, Z+39	; 0x27
 604:	01 96       	adiw	r24, 0x01	; 1
 606:	a1 1d       	adc	r26, r1
 608:	b1 1d       	adc	r27, r1
 60a:	84 a3       	std	Z+36, r24	; 0x24
 60c:	95 a3       	std	Z+37, r25	; 0x25
 60e:	a6 a3       	std	Z+38, r26	; 0x26
 610:	b7 a3       	std	Z+39, r27	; 0x27
 612:	08 c0       	rjmp	.+16     	; 0x624 <__vector_83+0x70>
	} else {
		Counters.TimerD1 = 0;
 614:	10 92 2e 20 	sts	0x202E, r1
 618:	10 92 2f 20 	sts	0x202F, r1
 61c:	10 92 30 20 	sts	0x2030, r1
 620:	10 92 31 20 	sts	0x2031, r1
	}
}
 624:	ff 91       	pop	r31
 626:	ef 91       	pop	r30
 628:	bf 91       	pop	r27
 62a:	af 91       	pop	r26
 62c:	9f 91       	pop	r25
 62e:	8f 91       	pop	r24
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0b be       	out	0x3b, r0	; 59
 636:	0f 90       	pop	r0
 638:	09 be       	out	0x39, r0	; 57
 63a:	0f 90       	pop	r0
 63c:	08 be       	out	0x38, r0	; 56
 63e:	0f 90       	pop	r0
 640:	0f be       	out	0x3f, r0	; 63
 642:	0f 90       	pop	r0
 644:	1f 90       	pop	r1
 646:	18 95       	reti

00000648 <__vector_47>:

ISR(TCE0_OVF_vect)
{
 648:	1f 92       	push	r1
 64a:	0f 92       	push	r0
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	0f 92       	push	r0
 650:	11 24       	eor	r1, r1
 652:	08 b6       	in	r0, 0x38	; 56
 654:	0f 92       	push	r0
 656:	18 be       	out	0x38, r1	; 56
 658:	09 b6       	in	r0, 0x39	; 57
 65a:	0f 92       	push	r0
 65c:	19 be       	out	0x39, r1	; 57
 65e:	0b b6       	in	r0, 0x3b	; 59
 660:	0f 92       	push	r0
 662:	1b be       	out	0x3b, r1	; 59
 664:	2f 93       	push	r18
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	af 93       	push	r26
 66c:	bf 93       	push	r27
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
	if(Counters.TimerE0 < MAX_TIMEOUT) {
 672:	80 91 32 20 	lds	r24, 0x2032
 676:	90 91 33 20 	lds	r25, 0x2033
 67a:	a0 91 34 20 	lds	r26, 0x2034
 67e:	b0 91 35 20 	lds	r27, 0x2035
 682:	80 31       	cpi	r24, 0x10	; 16
 684:	97 42       	sbci	r25, 0x27	; 39
 686:	a1 05       	cpc	r26, r1
 688:	b1 05       	cpc	r27, r1
 68a:	70 f4       	brcc	.+28     	; 0x6a8 <__vector_47+0x60>
		Counters.TimerE0++;
 68c:	ea e0       	ldi	r30, 0x0A	; 10
 68e:	f0 e2       	ldi	r31, 0x20	; 32
 690:	80 a5       	ldd	r24, Z+40	; 0x28
 692:	91 a5       	ldd	r25, Z+41	; 0x29
 694:	a2 a5       	ldd	r26, Z+42	; 0x2a
 696:	b3 a5       	ldd	r27, Z+43	; 0x2b
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	a1 1d       	adc	r26, r1
 69c:	b1 1d       	adc	r27, r1
 69e:	80 a7       	std	Z+40, r24	; 0x28
 6a0:	91 a7       	std	Z+41, r25	; 0x29
 6a2:	a2 a7       	std	Z+42, r26	; 0x2a
 6a4:	b3 a7       	std	Z+43, r27	; 0x2b
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <__vector_47+0x70>
	} else {
		Counters.TimerE0 = 0;
 6a8:	10 92 32 20 	sts	0x2032, r1
 6ac:	10 92 33 20 	sts	0x2033, r1
 6b0:	10 92 34 20 	sts	0x2034, r1
 6b4:	10 92 35 20 	sts	0x2035, r1
	}
}
 6b8:	ff 91       	pop	r31
 6ba:	ef 91       	pop	r30
 6bc:	bf 91       	pop	r27
 6be:	af 91       	pop	r26
 6c0:	9f 91       	pop	r25
 6c2:	8f 91       	pop	r24
 6c4:	2f 91       	pop	r18
 6c6:	0f 90       	pop	r0
 6c8:	0b be       	out	0x3b, r0	; 59
 6ca:	0f 90       	pop	r0
 6cc:	09 be       	out	0x39, r0	; 57
 6ce:	0f 90       	pop	r0
 6d0:	08 be       	out	0x38, r0	; 56
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	0f 90       	pop	r0
 6d8:	1f 90       	pop	r1
 6da:	18 95       	reti

000006dc <__vector_53>:

ISR(TCE1_OVF_vect)
{
 6dc:	1f 92       	push	r1
 6de:	0f 92       	push	r0
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	0f 92       	push	r0
 6e4:	11 24       	eor	r1, r1
 6e6:	08 b6       	in	r0, 0x38	; 56
 6e8:	0f 92       	push	r0
 6ea:	18 be       	out	0x38, r1	; 56
 6ec:	09 b6       	in	r0, 0x39	; 57
 6ee:	0f 92       	push	r0
 6f0:	19 be       	out	0x39, r1	; 57
 6f2:	0b b6       	in	r0, 0x3b	; 59
 6f4:	0f 92       	push	r0
 6f6:	1b be       	out	0x3b, r1	; 59
 6f8:	2f 93       	push	r18
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	ef 93       	push	r30
 704:	ff 93       	push	r31
	if(Counters.TimerE1 < MAX_TIMEOUT) {
 706:	80 91 36 20 	lds	r24, 0x2036
 70a:	90 91 37 20 	lds	r25, 0x2037
 70e:	a0 91 38 20 	lds	r26, 0x2038
 712:	b0 91 39 20 	lds	r27, 0x2039
 716:	80 31       	cpi	r24, 0x10	; 16
 718:	97 42       	sbci	r25, 0x27	; 39
 71a:	a1 05       	cpc	r26, r1
 71c:	b1 05       	cpc	r27, r1
 71e:	70 f4       	brcc	.+28     	; 0x73c <__vector_53+0x60>
		Counters.TimerE1++;
 720:	ea e0       	ldi	r30, 0x0A	; 10
 722:	f0 e2       	ldi	r31, 0x20	; 32
 724:	84 a5       	ldd	r24, Z+44	; 0x2c
 726:	95 a5       	ldd	r25, Z+45	; 0x2d
 728:	a6 a5       	ldd	r26, Z+46	; 0x2e
 72a:	b7 a5       	ldd	r27, Z+47	; 0x2f
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	a1 1d       	adc	r26, r1
 730:	b1 1d       	adc	r27, r1
 732:	84 a7       	std	Z+44, r24	; 0x2c
 734:	95 a7       	std	Z+45, r25	; 0x2d
 736:	a6 a7       	std	Z+46, r26	; 0x2e
 738:	b7 a7       	std	Z+47, r27	; 0x2f
 73a:	08 c0       	rjmp	.+16     	; 0x74c <__vector_53+0x70>
	} else {
		Counters.TimerE1 = 0;
 73c:	10 92 36 20 	sts	0x2036, r1
 740:	10 92 37 20 	sts	0x2037, r1
 744:	10 92 38 20 	sts	0x2038, r1
 748:	10 92 39 20 	sts	0x2039, r1
	}
}
 74c:	ff 91       	pop	r31
 74e:	ef 91       	pop	r30
 750:	bf 91       	pop	r27
 752:	af 91       	pop	r26
 754:	9f 91       	pop	r25
 756:	8f 91       	pop	r24
 758:	2f 91       	pop	r18
 75a:	0f 90       	pop	r0
 75c:	0b be       	out	0x3b, r0	; 59
 75e:	0f 90       	pop	r0
 760:	09 be       	out	0x39, r0	; 57
 762:	0f 90       	pop	r0
 764:	08 be       	out	0x38, r0	; 56
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__vector_108>:

ISR(TCF0_OVF_vect)
{
 770:	1f 92       	push	r1
 772:	0f 92       	push	r0
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
 77a:	08 b6       	in	r0, 0x38	; 56
 77c:	0f 92       	push	r0
 77e:	18 be       	out	0x38, r1	; 56
 780:	09 b6       	in	r0, 0x39	; 57
 782:	0f 92       	push	r0
 784:	19 be       	out	0x39, r1	; 57
 786:	0b b6       	in	r0, 0x3b	; 59
 788:	0f 92       	push	r0
 78a:	1b be       	out	0x3b, r1	; 59
 78c:	2f 93       	push	r18
 78e:	8f 93       	push	r24
 790:	9f 93       	push	r25
 792:	af 93       	push	r26
 794:	bf 93       	push	r27
 796:	ef 93       	push	r30
 798:	ff 93       	push	r31
	if(Counters.TimerF0 < MAX_TIMEOUT) {
 79a:	80 91 3a 20 	lds	r24, 0x203A
 79e:	90 91 3b 20 	lds	r25, 0x203B
 7a2:	a0 91 3c 20 	lds	r26, 0x203C
 7a6:	b0 91 3d 20 	lds	r27, 0x203D
 7aa:	80 31       	cpi	r24, 0x10	; 16
 7ac:	97 42       	sbci	r25, 0x27	; 39
 7ae:	a1 05       	cpc	r26, r1
 7b0:	b1 05       	cpc	r27, r1
 7b2:	70 f4       	brcc	.+28     	; 0x7d0 <__vector_108+0x60>
		Counters.TimerF0++;
 7b4:	ea e0       	ldi	r30, 0x0A	; 10
 7b6:	f0 e2       	ldi	r31, 0x20	; 32
 7b8:	80 a9       	ldd	r24, Z+48	; 0x30
 7ba:	91 a9       	ldd	r25, Z+49	; 0x31
 7bc:	a2 a9       	ldd	r26, Z+50	; 0x32
 7be:	b3 a9       	ldd	r27, Z+51	; 0x33
 7c0:	01 96       	adiw	r24, 0x01	; 1
 7c2:	a1 1d       	adc	r26, r1
 7c4:	b1 1d       	adc	r27, r1
 7c6:	80 ab       	std	Z+48, r24	; 0x30
 7c8:	91 ab       	std	Z+49, r25	; 0x31
 7ca:	a2 ab       	std	Z+50, r26	; 0x32
 7cc:	b3 ab       	std	Z+51, r27	; 0x33
 7ce:	08 c0       	rjmp	.+16     	; 0x7e0 <__vector_108+0x70>
	} else {
		Counters.TimerF0 = 0;
 7d0:	10 92 3a 20 	sts	0x203A, r1
 7d4:	10 92 3b 20 	sts	0x203B, r1
 7d8:	10 92 3c 20 	sts	0x203C, r1
 7dc:	10 92 3d 20 	sts	0x203D, r1
	}
}
 7e0:	ff 91       	pop	r31
 7e2:	ef 91       	pop	r30
 7e4:	bf 91       	pop	r27
 7e6:	af 91       	pop	r26
 7e8:	9f 91       	pop	r25
 7ea:	8f 91       	pop	r24
 7ec:	2f 91       	pop	r18
 7ee:	0f 90       	pop	r0
 7f0:	0b be       	out	0x3b, r0	; 59
 7f2:	0f 90       	pop	r0
 7f4:	09 be       	out	0x39, r0	; 57
 7f6:	0f 90       	pop	r0
 7f8:	08 be       	out	0x38, r0	; 56
 7fa:	0f 90       	pop	r0
 7fc:	0f be       	out	0x3f, r0	; 63
 7fe:	0f 90       	pop	r0
 800:	1f 90       	pop	r1
 802:	18 95       	reti

00000804 <__vector_114>:

ISR(TCF1_OVF_vect)
{
 804:	1f 92       	push	r1
 806:	0f 92       	push	r0
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	0f 92       	push	r0
 80c:	11 24       	eor	r1, r1
 80e:	08 b6       	in	r0, 0x38	; 56
 810:	0f 92       	push	r0
 812:	18 be       	out	0x38, r1	; 56
 814:	09 b6       	in	r0, 0x39	; 57
 816:	0f 92       	push	r0
 818:	19 be       	out	0x39, r1	; 57
 81a:	0b b6       	in	r0, 0x3b	; 59
 81c:	0f 92       	push	r0
 81e:	1b be       	out	0x3b, r1	; 59
 820:	2f 93       	push	r18
 822:	8f 93       	push	r24
 824:	9f 93       	push	r25
 826:	af 93       	push	r26
 828:	bf 93       	push	r27
 82a:	ef 93       	push	r30
 82c:	ff 93       	push	r31
	if(Counters.TimerF1 < MAX_TIMEOUT) {
 82e:	80 91 3e 20 	lds	r24, 0x203E
 832:	90 91 3f 20 	lds	r25, 0x203F
 836:	a0 91 40 20 	lds	r26, 0x2040
 83a:	b0 91 41 20 	lds	r27, 0x2041
 83e:	80 31       	cpi	r24, 0x10	; 16
 840:	97 42       	sbci	r25, 0x27	; 39
 842:	a1 05       	cpc	r26, r1
 844:	b1 05       	cpc	r27, r1
 846:	70 f4       	brcc	.+28     	; 0x864 <__vector_114+0x60>
		Counters.TimerF1++;
 848:	ea e0       	ldi	r30, 0x0A	; 10
 84a:	f0 e2       	ldi	r31, 0x20	; 32
 84c:	84 a9       	ldd	r24, Z+52	; 0x34
 84e:	95 a9       	ldd	r25, Z+53	; 0x35
 850:	a6 a9       	ldd	r26, Z+54	; 0x36
 852:	b7 a9       	ldd	r27, Z+55	; 0x37
 854:	01 96       	adiw	r24, 0x01	; 1
 856:	a1 1d       	adc	r26, r1
 858:	b1 1d       	adc	r27, r1
 85a:	84 ab       	std	Z+52, r24	; 0x34
 85c:	95 ab       	std	Z+53, r25	; 0x35
 85e:	a6 ab       	std	Z+54, r26	; 0x36
 860:	b7 ab       	std	Z+55, r27	; 0x37
 862:	08 c0       	rjmp	.+16     	; 0x874 <__vector_114+0x70>
	} else {
		Counters.TimerF1 = 0;
 864:	10 92 3e 20 	sts	0x203E, r1
 868:	10 92 3f 20 	sts	0x203F, r1
 86c:	10 92 40 20 	sts	0x2040, r1
 870:	10 92 41 20 	sts	0x2041, r1
	}
}
 874:	ff 91       	pop	r31
 876:	ef 91       	pop	r30
 878:	bf 91       	pop	r27
 87a:	af 91       	pop	r26
 87c:	9f 91       	pop	r25
 87e:	8f 91       	pop	r24
 880:	2f 91       	pop	r18
 882:	0f 90       	pop	r0
 884:	0b be       	out	0x3b, r0	; 59
 886:	0f 90       	pop	r0
 888:	09 be       	out	0x39, r0	; 57
 88a:	0f 90       	pop	r0
 88c:	08 be       	out	0x38, r0	; 56
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0f 90       	pop	r0
 894:	1f 90       	pop	r1
 896:	18 95       	reti

00000898 <__vector_27>:
	sei(); // global interrupt enable
}

//Transmit interrupt routine
ISR(USARTC0_TXC_vect)
{
 898:	1f 92       	push	r1
 89a:	0f 92       	push	r0
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	0f 92       	push	r0
 8a0:	11 24       	eor	r1, r1
 8a2:	08 b6       	in	r0, 0x38	; 56
 8a4:	0f 92       	push	r0
 8a6:	18 be       	out	0x38, r1	; 56
 8a8:	8f 93       	push	r24
	usartc0_byte_transmitted = 1;
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	80 93 4d 20 	sts	0x204D, r24
}
 8b0:	8f 91       	pop	r24
 8b2:	0f 90       	pop	r0
 8b4:	08 be       	out	0x38, r0	; 56
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	0f 90       	pop	r0
 8bc:	1f 90       	pop	r1
 8be:	18 95       	reti

000008c0 <USARTC0_clear_receiver_buffer>:
	}
	
}

void USARTC0_clear_receiver_buffer()
{
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0;i<USARTC0_RECEIVE_BUFFER_SIZE;i++)
	{
		usartc0_receive_buffer[i] = 0x00;
 8c4:	fc 01       	movw	r30, r24
 8c6:	e6 58       	subi	r30, 0x86	; 134
 8c8:	fe 4d       	sbci	r31, 0xDE	; 222
 8ca:	10 82       	st	Z, r1
 8cc:	01 96       	adiw	r24, 0x01	; 1
	
}

void USARTC0_clear_receiver_buffer()
{
	for(uint8_t i = 0;i<USARTC0_RECEIVE_BUFFER_SIZE;i++)
 8ce:	84 36       	cpi	r24, 0x64	; 100
 8d0:	91 05       	cpc	r25, r1
 8d2:	c1 f7       	brne	.-16     	; 0x8c4 <USARTC0_clear_receiver_buffer+0x4>
	{
		usartc0_receive_buffer[i] = 0x00;
	}

	usartc0_receive_buffer_index = 0;
 8d4:	10 92 4b 20 	sts	0x204B, r1
    usartc0_receive_buffer[usartc0_receive_buffer_index] = '\0';
 8d8:	e0 91 4b 20 	lds	r30, 0x204B
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	e6 58       	subi	r30, 0x86	; 134
 8e0:	fe 4d       	sbci	r31, 0xDE	; 222
 8e2:	10 82       	st	Z, r1
    usartc0_message_received = 0;
 8e4:	10 92 4c 20 	sts	0x204C, r1
 8e8:	08 95       	ret

000008ea <__vector_25>:
	usartc0_byte_transmitted = 1;
}

//Receive interrupt routine
ISR(USARTC0_RXC_vect)
{
 8ea:	1f 92       	push	r1
 8ec:	0f 92       	push	r0
 8ee:	0f b6       	in	r0, 0x3f	; 63
 8f0:	0f 92       	push	r0
 8f2:	11 24       	eor	r1, r1
 8f4:	08 b6       	in	r0, 0x38	; 56
 8f6:	0f 92       	push	r0
 8f8:	18 be       	out	0x38, r1	; 56
 8fa:	09 b6       	in	r0, 0x39	; 57
 8fc:	0f 92       	push	r0
 8fe:	19 be       	out	0x39, r1	; 57
 900:	0b b6       	in	r0, 0x3b	; 59
 902:	0f 92       	push	r0
 904:	1b be       	out	0x3b, r1	; 59
 906:	2f 93       	push	r18
 908:	3f 93       	push	r19
 90a:	4f 93       	push	r20
 90c:	5f 93       	push	r21
 90e:	6f 93       	push	r22
 910:	7f 93       	push	r23
 912:	8f 93       	push	r24
 914:	9f 93       	push	r25
 916:	af 93       	push	r26
 918:	bf 93       	push	r27
 91a:	ef 93       	push	r30
 91c:	ff 93       	push	r31
	uint8_t usartc0_received_byte;
	
	usartc0_received_byte = USARTC0_DATA;
 91e:	80 91 a0 08 	lds	r24, 0x08A0
	if(usartc0_receive_buffer_index < USARTC0_RECEIVE_BUFFER_SIZE)
 922:	90 91 4b 20 	lds	r25, 0x204B
 926:	94 36       	cpi	r25, 0x64	; 100
 928:	c8 f4       	brcc	.+50     	; 0x95c <__vector_25+0x72>
	{
		if(usartc0_received_byte == '\r' || usartc0_received_byte == '\n')
 92a:	8d 30       	cpi	r24, 0x0D	; 13
 92c:	11 f0       	breq	.+4      	; 0x932 <__vector_25+0x48>
 92e:	8a 30       	cpi	r24, 0x0A	; 10
 930:	49 f4       	brne	.+18     	; 0x944 <__vector_25+0x5a>
		{
			usartc0_receive_buffer[usartc0_receive_buffer_index] = usartc0_received_byte;
 932:	e0 91 4b 20 	lds	r30, 0x204B
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	e6 58       	subi	r30, 0x86	; 134
 93a:	fe 4d       	sbci	r31, 0xDE	; 222
 93c:	80 83       	st	Z, r24
			usartc0_message_received = 1;
 93e:	91 e0       	ldi	r25, 0x01	; 1
 940:	90 93 4c 20 	sts	0x204C, r25
		}
		usartc0_receive_buffer[usartc0_receive_buffer_index] = usartc0_received_byte;
 944:	e0 91 4b 20 	lds	r30, 0x204B
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	e6 58       	subi	r30, 0x86	; 134
 94c:	fe 4d       	sbci	r31, 0xDE	; 222
 94e:	80 83       	st	Z, r24
		usartc0_receive_buffer_index++;
 950:	80 91 4b 20 	lds	r24, 0x204B
 954:	8f 5f       	subi	r24, 0xFF	; 255
 956:	80 93 4b 20 	sts	0x204B, r24
 95a:	02 c0       	rjmp	.+4      	; 0x960 <__vector_25+0x76>
	}
	else
	{
		USARTC0_clear_receiver_buffer();	
 95c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <USARTC0_clear_receiver_buffer>
	}
	
}
 960:	ff 91       	pop	r31
 962:	ef 91       	pop	r30
 964:	bf 91       	pop	r27
 966:	af 91       	pop	r26
 968:	9f 91       	pop	r25
 96a:	8f 91       	pop	r24
 96c:	7f 91       	pop	r23
 96e:	6f 91       	pop	r22
 970:	5f 91       	pop	r21
 972:	4f 91       	pop	r20
 974:	3f 91       	pop	r19
 976:	2f 91       	pop	r18
 978:	0f 90       	pop	r0
 97a:	0b be       	out	0x3b, r0	; 59
 97c:	0f 90       	pop	r0
 97e:	09 be       	out	0x39, r0	; 57
 980:	0f 90       	pop	r0
 982:	08 be       	out	0x38, r0	; 56
 984:	0f 90       	pop	r0
 986:	0f be       	out	0x3f, r0	; 63
 988:	0f 90       	pop	r0
 98a:	1f 90       	pop	r1
 98c:	18 95       	reti

0000098e <__vector_90>:
	sei(); // global interrupt enable
}

//Transmit interrupt routine
ISR(USARTD0_TXC_vect)
{
 98e:	1f 92       	push	r1
 990:	0f 92       	push	r0
 992:	0f b6       	in	r0, 0x3f	; 63
 994:	0f 92       	push	r0
 996:	11 24       	eor	r1, r1
 998:	08 b6       	in	r0, 0x38	; 56
 99a:	0f 92       	push	r0
 99c:	18 be       	out	0x38, r1	; 56
 99e:	8f 93       	push	r24
	usartd0_byte_transmitted = 1;
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	80 93 4a 20 	sts	0x204A, r24
}
 9a6:	8f 91       	pop	r24
 9a8:	0f 90       	pop	r0
 9aa:	08 be       	out	0x38, r0	; 56
 9ac:	0f 90       	pop	r0
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <USARTD0_clear_receiver_buffer>:
	}	
}

void USARTD0_clear_receiver_buffer()
{
	for(int i = 0;i<USARTD0_RECEIVE_BUFFER_SIZE;i++)
 9b6:	80 e0       	ldi	r24, 0x00	; 0
 9b8:	90 e0       	ldi	r25, 0x00	; 0
	{
		usartd0_receive_buffer[i] = 0x00;
 9ba:	fc 01       	movw	r30, r24
 9bc:	ea 5e       	subi	r30, 0xEA	; 234
 9be:	fe 4d       	sbci	r31, 0xDE	; 222
 9c0:	10 82       	st	Z, r1
	}	
}

void USARTD0_clear_receiver_buffer()
{
	for(int i = 0;i<USARTD0_RECEIVE_BUFFER_SIZE;i++)
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	84 36       	cpi	r24, 0x64	; 100
 9c6:	91 05       	cpc	r25, r1
 9c8:	c1 f7       	brne	.-16     	; 0x9ba <USARTD0_clear_receiver_buffer+0x4>
	{
		usartd0_receive_buffer[i] = 0x00;
	}

	usartd0_receive_buffer_index = 0;
 9ca:	10 92 48 20 	sts	0x2048, r1
    usartd0_receive_buffer[usartd0_receive_buffer_index] = '\0';
 9ce:	e0 91 48 20 	lds	r30, 0x2048
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	ea 5e       	subi	r30, 0xEA	; 234
 9d6:	fe 4d       	sbci	r31, 0xDE	; 222
 9d8:	10 82       	st	Z, r1
    usartd0_message_received = 0;
 9da:	10 92 49 20 	sts	0x2049, r1
 9de:	08 95       	ret

000009e0 <__vector_88>:
	usartd0_byte_transmitted = 1;
}

//Receive interrupt routine
ISR(USARTD0_RXC_vect)
{
 9e0:	1f 92       	push	r1
 9e2:	0f 92       	push	r0
 9e4:	0f b6       	in	r0, 0x3f	; 63
 9e6:	0f 92       	push	r0
 9e8:	11 24       	eor	r1, r1
 9ea:	08 b6       	in	r0, 0x38	; 56
 9ec:	0f 92       	push	r0
 9ee:	18 be       	out	0x38, r1	; 56
 9f0:	09 b6       	in	r0, 0x39	; 57
 9f2:	0f 92       	push	r0
 9f4:	19 be       	out	0x39, r1	; 57
 9f6:	0b b6       	in	r0, 0x3b	; 59
 9f8:	0f 92       	push	r0
 9fa:	1b be       	out	0x3b, r1	; 59
 9fc:	2f 93       	push	r18
 9fe:	3f 93       	push	r19
 a00:	4f 93       	push	r20
 a02:	5f 93       	push	r21
 a04:	6f 93       	push	r22
 a06:	7f 93       	push	r23
 a08:	8f 93       	push	r24
 a0a:	9f 93       	push	r25
 a0c:	af 93       	push	r26
 a0e:	bf 93       	push	r27
 a10:	ef 93       	push	r30
 a12:	ff 93       	push	r31
	char usartd0_received_byte;
	
	usartd0_received_byte = USARTD0_DATA;
 a14:	80 91 a0 09 	lds	r24, 0x09A0
	if(usartd0_receive_buffer_index < USARTD0_RECEIVE_BUFFER_SIZE)
 a18:	90 91 48 20 	lds	r25, 0x2048
 a1c:	94 36       	cpi	r25, 0x64	; 100
 a1e:	c8 f4       	brcc	.+50     	; 0xa52 <__vector_88+0x72>
	{
		if(usartd0_received_byte == '\r' || usartd0_received_byte == '\n')
 a20:	8d 30       	cpi	r24, 0x0D	; 13
 a22:	11 f0       	breq	.+4      	; 0xa28 <__vector_88+0x48>
 a24:	8a 30       	cpi	r24, 0x0A	; 10
 a26:	49 f4       	brne	.+18     	; 0xa3a <__vector_88+0x5a>
		{
			usartd0_receive_buffer[usartd0_receive_buffer_index] = usartd0_received_byte;
 a28:	e0 91 48 20 	lds	r30, 0x2048
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	ea 5e       	subi	r30, 0xEA	; 234
 a30:	fe 4d       	sbci	r31, 0xDE	; 222
 a32:	80 83       	st	Z, r24
			usartd0_message_received = 1;
 a34:	91 e0       	ldi	r25, 0x01	; 1
 a36:	90 93 49 20 	sts	0x2049, r25
		}
		usartd0_receive_buffer[usartd0_receive_buffer_index] = usartd0_received_byte;
 a3a:	e0 91 48 20 	lds	r30, 0x2048
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	ea 5e       	subi	r30, 0xEA	; 234
 a42:	fe 4d       	sbci	r31, 0xDE	; 222
 a44:	80 83       	st	Z, r24
		usartd0_receive_buffer_index++;
 a46:	80 91 48 20 	lds	r24, 0x2048
 a4a:	8f 5f       	subi	r24, 0xFF	; 255
 a4c:	80 93 48 20 	sts	0x2048, r24
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <__vector_88+0x76>
	}
	else
	{
		USARTD0_clear_receiver_buffer();	
 a52:	0e 94 db 04 	call	0x9b6	; 0x9b6 <USARTD0_clear_receiver_buffer>
	}	
}
 a56:	ff 91       	pop	r31
 a58:	ef 91       	pop	r30
 a5a:	bf 91       	pop	r27
 a5c:	af 91       	pop	r26
 a5e:	9f 91       	pop	r25
 a60:	8f 91       	pop	r24
 a62:	7f 91       	pop	r23
 a64:	6f 91       	pop	r22
 a66:	5f 91       	pop	r21
 a68:	4f 91       	pop	r20
 a6a:	3f 91       	pop	r19
 a6c:	2f 91       	pop	r18
 a6e:	0f 90       	pop	r0
 a70:	0b be       	out	0x3b, r0	; 59
 a72:	0f 90       	pop	r0
 a74:	09 be       	out	0x39, r0	; 57
 a76:	0f 90       	pop	r0
 a78:	08 be       	out	0x38, r0	; 56
 a7a:	0f 90       	pop	r0
 a7c:	0f be       	out	0x3f, r0	; 63
 a7e:	0f 90       	pop	r0
 a80:	1f 90       	pop	r1
 a82:	18 95       	reti

00000a84 <__vector_60>:
	sei(); // global interrupt enable
}

//Transmit interrupt routine
ISR(USARTE0_TXC_vect)
{
 a84:	1f 92       	push	r1
 a86:	0f 92       	push	r0
 a88:	0f b6       	in	r0, 0x3f	; 63
 a8a:	0f 92       	push	r0
 a8c:	11 24       	eor	r1, r1
 a8e:	08 b6       	in	r0, 0x38	; 56
 a90:	0f 92       	push	r0
 a92:	18 be       	out	0x38, r1	; 56
 a94:	8f 93       	push	r24
	usarte0_byte_transmitted = 1;
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	80 93 47 20 	sts	0x2047, r24
}
 a9c:	8f 91       	pop	r24
 a9e:	0f 90       	pop	r0
 aa0:	08 be       	out	0x38, r0	; 56
 aa2:	0f 90       	pop	r0
 aa4:	0f be       	out	0x3f, r0	; 63
 aa6:	0f 90       	pop	r0
 aa8:	1f 90       	pop	r1
 aaa:	18 95       	reti

00000aac <USARTE0_clear_receiver_buffer>:
	
}

void USARTE0_clear_receiver_buffer()
{
	for(int i = 0;i<USARTE0_RECEIVE_BUFFER_SIZE;i++)
 aac:	80 e0       	ldi	r24, 0x00	; 0
 aae:	90 e0       	ldi	r25, 0x00	; 0
	{
		usarte0_receive_buffer[i] = 0x00;
 ab0:	fc 01       	movw	r30, r24
 ab2:	ee 54       	subi	r30, 0x4E	; 78
 ab4:	ff 4d       	sbci	r31, 0xDF	; 223
 ab6:	10 82       	st	Z, r1
	
}

void USARTE0_clear_receiver_buffer()
{
	for(int i = 0;i<USARTE0_RECEIVE_BUFFER_SIZE;i++)
 ab8:	01 96       	adiw	r24, 0x01	; 1
 aba:	84 36       	cpi	r24, 0x64	; 100
 abc:	91 05       	cpc	r25, r1
 abe:	c1 f7       	brne	.-16     	; 0xab0 <USARTE0_clear_receiver_buffer+0x4>
	{
		usarte0_receive_buffer[i] = 0x00;
	}

	usarte0_receive_buffer_index = 0;
 ac0:	10 92 45 20 	sts	0x2045, r1
    usarte0_receive_buffer[usarte0_receive_buffer_index] = '\0';
 ac4:	e0 91 45 20 	lds	r30, 0x2045
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	ee 54       	subi	r30, 0x4E	; 78
 acc:	ff 4d       	sbci	r31, 0xDF	; 223
 ace:	10 82       	st	Z, r1
    usarte0_message_received = 0;
 ad0:	10 92 46 20 	sts	0x2046, r1
 ad4:	08 95       	ret

00000ad6 <__vector_58>:
	usarte0_byte_transmitted = 1;
}

//Receive interrupt routine
ISR(USARTE0_RXC_vect)
{
 ad6:	1f 92       	push	r1
 ad8:	0f 92       	push	r0
 ada:	0f b6       	in	r0, 0x3f	; 63
 adc:	0f 92       	push	r0
 ade:	11 24       	eor	r1, r1
 ae0:	08 b6       	in	r0, 0x38	; 56
 ae2:	0f 92       	push	r0
 ae4:	18 be       	out	0x38, r1	; 56
 ae6:	09 b6       	in	r0, 0x39	; 57
 ae8:	0f 92       	push	r0
 aea:	19 be       	out	0x39, r1	; 57
 aec:	0b b6       	in	r0, 0x3b	; 59
 aee:	0f 92       	push	r0
 af0:	1b be       	out	0x3b, r1	; 59
 af2:	2f 93       	push	r18
 af4:	3f 93       	push	r19
 af6:	4f 93       	push	r20
 af8:	5f 93       	push	r21
 afa:	6f 93       	push	r22
 afc:	7f 93       	push	r23
 afe:	8f 93       	push	r24
 b00:	9f 93       	push	r25
 b02:	af 93       	push	r26
 b04:	bf 93       	push	r27
 b06:	ef 93       	push	r30
 b08:	ff 93       	push	r31
	char usarte0_received_byte;
	
	usarte0_received_byte = USARTE0_DATA;
 b0a:	80 91 a0 0a 	lds	r24, 0x0AA0
	if(usarte0_receive_buffer_index < USARTE0_RECEIVE_BUFFER_SIZE)
 b0e:	90 91 45 20 	lds	r25, 0x2045
 b12:	94 36       	cpi	r25, 0x64	; 100
 b14:	c8 f4       	brcc	.+50     	; 0xb48 <__vector_58+0x72>
	{
		if(usarte0_received_byte == '\r' || usarte0_received_byte == '\n')
 b16:	8d 30       	cpi	r24, 0x0D	; 13
 b18:	11 f0       	breq	.+4      	; 0xb1e <__vector_58+0x48>
 b1a:	8a 30       	cpi	r24, 0x0A	; 10
 b1c:	49 f4       	brne	.+18     	; 0xb30 <__vector_58+0x5a>
		{
			usarte0_receive_buffer[usarte0_receive_buffer_index] = usarte0_received_byte;
 b1e:	e0 91 45 20 	lds	r30, 0x2045
 b22:	f0 e0       	ldi	r31, 0x00	; 0
 b24:	ee 54       	subi	r30, 0x4E	; 78
 b26:	ff 4d       	sbci	r31, 0xDF	; 223
 b28:	80 83       	st	Z, r24
			usarte0_message_received = 1;
 b2a:	91 e0       	ldi	r25, 0x01	; 1
 b2c:	90 93 46 20 	sts	0x2046, r25
		}
		usarte0_receive_buffer[usarte0_receive_buffer_index] = usarte0_received_byte;
 b30:	e0 91 45 20 	lds	r30, 0x2045
 b34:	f0 e0       	ldi	r31, 0x00	; 0
 b36:	ee 54       	subi	r30, 0x4E	; 78
 b38:	ff 4d       	sbci	r31, 0xDF	; 223
 b3a:	80 83       	st	Z, r24
		usarte0_receive_buffer_index++;
 b3c:	80 91 45 20 	lds	r24, 0x2045
 b40:	8f 5f       	subi	r24, 0xFF	; 255
 b42:	80 93 45 20 	sts	0x2045, r24
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <__vector_58+0x76>
	}
	else
	{
		USARTE0_clear_receiver_buffer();	
 b48:	0e 94 56 05 	call	0xaac	; 0xaac <USARTE0_clear_receiver_buffer>
	}
	
}
 b4c:	ff 91       	pop	r31
 b4e:	ef 91       	pop	r30
 b50:	bf 91       	pop	r27
 b52:	af 91       	pop	r26
 b54:	9f 91       	pop	r25
 b56:	8f 91       	pop	r24
 b58:	7f 91       	pop	r23
 b5a:	6f 91       	pop	r22
 b5c:	5f 91       	pop	r21
 b5e:	4f 91       	pop	r20
 b60:	3f 91       	pop	r19
 b62:	2f 91       	pop	r18
 b64:	0f 90       	pop	r0
 b66:	0b be       	out	0x3b, r0	; 59
 b68:	0f 90       	pop	r0
 b6a:	09 be       	out	0x39, r0	; 57
 b6c:	0f 90       	pop	r0
 b6e:	08 be       	out	0x38, r0	; 56
 b70:	0f 90       	pop	r0
 b72:	0f be       	out	0x3f, r0	; 63
 b74:	0f 90       	pop	r0
 b76:	1f 90       	pop	r1
 b78:	18 95       	reti

00000b7a <__vector_121>:
	sei(); // global interrupt enable
}

//Transmit interrupt routine
ISR(USARTF0_TXC_vect)
{
 b7a:	1f 92       	push	r1
 b7c:	0f 92       	push	r0
 b7e:	0f b6       	in	r0, 0x3f	; 63
 b80:	0f 92       	push	r0
 b82:	11 24       	eor	r1, r1
 b84:	08 b6       	in	r0, 0x38	; 56
 b86:	0f 92       	push	r0
 b88:	18 be       	out	0x38, r1	; 56
 b8a:	8f 93       	push	r24
	usartf0_byte_transmitted = 1;
 b8c:	81 e0       	ldi	r24, 0x01	; 1
 b8e:	80 93 44 20 	sts	0x2044, r24
}
 b92:	8f 91       	pop	r24
 b94:	0f 90       	pop	r0
 b96:	08 be       	out	0x38, r0	; 56
 b98:	0f 90       	pop	r0
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	0f 90       	pop	r0
 b9e:	1f 90       	pop	r1
 ba0:	18 95       	reti

00000ba2 <USARTF0_clear_receiver_buffer>:
	}
	
}

void USARTF0_clear_receiver_buffer()
{
 ba2:	80 e0       	ldi	r24, 0x00	; 0
 ba4:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0;i<USARTF0_RECEIVE_BUFFER_SIZE;i++)
	{
    	usartf0_receive_buffer[i] = 0x00;
 ba6:	fc 01       	movw	r30, r24
 ba8:	e2 5b       	subi	r30, 0xB2	; 178
 baa:	ff 4d       	sbci	r31, 0xDF	; 223
 bac:	10 82       	st	Z, r1
 bae:	01 96       	adiw	r24, 0x01	; 1
	
}

void USARTF0_clear_receiver_buffer()
{
	for(uint8_t i = 0;i<USARTF0_RECEIVE_BUFFER_SIZE;i++)
 bb0:	84 36       	cpi	r24, 0x64	; 100
 bb2:	91 05       	cpc	r25, r1
 bb4:	c1 f7       	brne	.-16     	; 0xba6 <USARTF0_clear_receiver_buffer+0x4>
	{
    	usartf0_receive_buffer[i] = 0x00;
	}
    
    usartf0_receive_buffer_index = 0;
 bb6:	10 92 42 20 	sts	0x2042, r1
    usartf0_receive_buffer[usartf0_receive_buffer_index] = '\0';
 bba:	e0 91 42 20 	lds	r30, 0x2042
 bbe:	f0 e0       	ldi	r31, 0x00	; 0
 bc0:	e2 5b       	subi	r30, 0xB2	; 178
 bc2:	ff 4d       	sbci	r31, 0xDF	; 223
 bc4:	10 82       	st	Z, r1
    usartf0_message_received = 0;
 bc6:	10 92 43 20 	sts	0x2043, r1
 bca:	08 95       	ret

00000bcc <__vector_119>:
	usartf0_byte_transmitted = 1;
}

//Receive interrupt routine
ISR(USARTF0_RXC_vect)
{
 bcc:	1f 92       	push	r1
 bce:	0f 92       	push	r0
 bd0:	0f b6       	in	r0, 0x3f	; 63
 bd2:	0f 92       	push	r0
 bd4:	11 24       	eor	r1, r1
 bd6:	08 b6       	in	r0, 0x38	; 56
 bd8:	0f 92       	push	r0
 bda:	18 be       	out	0x38, r1	; 56
 bdc:	09 b6       	in	r0, 0x39	; 57
 bde:	0f 92       	push	r0
 be0:	19 be       	out	0x39, r1	; 57
 be2:	0b b6       	in	r0, 0x3b	; 59
 be4:	0f 92       	push	r0
 be6:	1b be       	out	0x3b, r1	; 59
 be8:	2f 93       	push	r18
 bea:	3f 93       	push	r19
 bec:	4f 93       	push	r20
 bee:	5f 93       	push	r21
 bf0:	6f 93       	push	r22
 bf2:	7f 93       	push	r23
 bf4:	8f 93       	push	r24
 bf6:	9f 93       	push	r25
 bf8:	af 93       	push	r26
 bfa:	bf 93       	push	r27
 bfc:	ef 93       	push	r30
 bfe:	ff 93       	push	r31
	char usartf0_received_byte;
	
	usartf0_received_byte = USARTF0_DATA;
 c00:	80 91 a0 0b 	lds	r24, 0x0BA0
	if(usartf0_receive_buffer_index < USARTF0_RECEIVE_BUFFER_SIZE)
 c04:	90 91 42 20 	lds	r25, 0x2042
 c08:	94 36       	cpi	r25, 0x64	; 100
 c0a:	c8 f4       	brcc	.+50     	; 0xc3e <__vector_119+0x72>
	{
		if(usartf0_received_byte == '\r' || usartf0_received_byte == '\n')
 c0c:	8d 30       	cpi	r24, 0x0D	; 13
 c0e:	11 f0       	breq	.+4      	; 0xc14 <__vector_119+0x48>
 c10:	8a 30       	cpi	r24, 0x0A	; 10
 c12:	49 f4       	brne	.+18     	; 0xc26 <__vector_119+0x5a>
		{
			usartf0_receive_buffer[usartf0_receive_buffer_index] = usartf0_received_byte;
 c14:	e0 91 42 20 	lds	r30, 0x2042
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	e2 5b       	subi	r30, 0xB2	; 178
 c1c:	ff 4d       	sbci	r31, 0xDF	; 223
 c1e:	80 83       	st	Z, r24
			usartf0_message_received = 1;
 c20:	91 e0       	ldi	r25, 0x01	; 1
 c22:	90 93 43 20 	sts	0x2043, r25
		}
		usartf0_receive_buffer[usartf0_receive_buffer_index] = usartf0_received_byte;
 c26:	e0 91 42 20 	lds	r30, 0x2042
 c2a:	f0 e0       	ldi	r31, 0x00	; 0
 c2c:	e2 5b       	subi	r30, 0xB2	; 178
 c2e:	ff 4d       	sbci	r31, 0xDF	; 223
 c30:	80 83       	st	Z, r24
		usartf0_receive_buffer_index++;
 c32:	80 91 42 20 	lds	r24, 0x2042
 c36:	8f 5f       	subi	r24, 0xFF	; 255
 c38:	80 93 42 20 	sts	0x2042, r24
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <__vector_119+0x76>
	}
	else
	{
		USARTF0_clear_receiver_buffer();	
 c3e:	0e 94 d1 05 	call	0xba2	; 0xba2 <USARTF0_clear_receiver_buffer>
	}
	
}
 c42:	ff 91       	pop	r31
 c44:	ef 91       	pop	r30
 c46:	bf 91       	pop	r27
 c48:	af 91       	pop	r26
 c4a:	9f 91       	pop	r25
 c4c:	8f 91       	pop	r24
 c4e:	7f 91       	pop	r23
 c50:	6f 91       	pop	r22
 c52:	5f 91       	pop	r21
 c54:	4f 91       	pop	r20
 c56:	3f 91       	pop	r19
 c58:	2f 91       	pop	r18
 c5a:	0f 90       	pop	r0
 c5c:	0b be       	out	0x3b, r0	; 59
 c5e:	0f 90       	pop	r0
 c60:	09 be       	out	0x39, r0	; 57
 c62:	0f 90       	pop	r0
 c64:	08 be       	out	0x38, r0	; 56
 c66:	0f 90       	pop	r0
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	0f 90       	pop	r0
 c6c:	1f 90       	pop	r1
 c6e:	18 95       	reti

00000c70 <_exit>:
 c70:	f8 94       	cli

00000c72 <__stop_program>:
 c72:	ff cf       	rjmp	.-2      	; 0xc72 <__stop_program>
